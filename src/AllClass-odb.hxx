// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ALL_CLASS_ODB_HXX
#define ALL_CLASS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "AllClass.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // papel
  //
  template <>
  struct class_traits< ::papel >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::papel >
  {
    public:
    typedef ::papel object_type;
    typedef ::papel* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // usuario
  //
  template <>
  struct class_traits< ::usuario >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::usuario >
  {
    public:
    typedef ::usuario object_type;
    typedef ::usuario* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // usuariopapel
  //
  template <>
  struct class_traits< ::usuariopapel >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::usuariopapel >
  {
    public:
    typedef ::usuariopapel object_type;
    typedef ::usuariopapel* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // auditoria
  //
  template <>
  struct class_traits< ::auditoria >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::auditoria >
  {
    public:
    typedef ::auditoria object_type;
    typedef ::auditoria* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // pessoa
  //
  template <>
  struct class_traits< ::pessoa >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::pessoa >
  {
    public:
    typedef ::pessoa object_type;
    typedef ::pessoa* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // denuncia
  //
  template <>
  struct class_traits< ::denuncia >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::denuncia >
  {
    public:
    typedef ::denuncia object_type;
    typedef ::denuncia* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // papel
  //
  template <typename A>
  struct query_columns< ::papel, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // permissoes
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    permissoes_type_;

    static const permissoes_type_ permissoes;
  };

  template <typename A>
  const typename query_columns< ::papel, id_pgsql, A >::id_type_
  query_columns< ::papel, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::papel, id_pgsql, A >::permissoes_type_
  query_columns< ::papel, id_pgsql, A >::
  permissoes (A::table_name, "\"permissoes\"", 0);

  template <typename A>
  struct pointer_query_columns< ::papel, id_pgsql, A >:
    query_columns< ::papel, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::papel, id_pgsql >:
    public access::object_traits< ::papel >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // permissoes
      //
      details::buffer permissoes_value;
      std::size_t permissoes_size;
      bool permissoes_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::papel, id_common >:
    public access::object_traits_impl< ::papel, id_pgsql >
  {
  };

  // usuario
  //
  template <typename A>
  struct query_columns< ::usuario, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // rg
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    rg_type_;

    static const rg_type_ rg;

    // cpf
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cpf_type_;

    static const cpf_type_ cpf;

    // nome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    nome_type_;

    static const nome_type_ nome;

    // sobrenome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    sobrenome_type_;

    static const sobrenome_type_ sobrenome;

    // hash_senha
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    hash_senha_type_;

    static const hash_senha_type_ hash_senha;

    // data_cadastro
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    data_cadastro_type_;

    static const data_cadastro_type_ data_cadastro;

    // ultimo_acesso
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ultimo_acesso_type_;

    static const ultimo_acesso_type_ ultimo_acesso;
  };

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::id_type_
  query_columns< ::usuario, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::rg_type_
  query_columns< ::usuario, id_pgsql, A >::
  rg (A::table_name, "\"rg\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::cpf_type_
  query_columns< ::usuario, id_pgsql, A >::
  cpf (A::table_name, "\"cpf\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::nome_type_
  query_columns< ::usuario, id_pgsql, A >::
  nome (A::table_name, "\"nome\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::sobrenome_type_
  query_columns< ::usuario, id_pgsql, A >::
  sobrenome (A::table_name, "\"sobrenome\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::hash_senha_type_
  query_columns< ::usuario, id_pgsql, A >::
  hash_senha (A::table_name, "\"hash_senha\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::data_cadastro_type_
  query_columns< ::usuario, id_pgsql, A >::
  data_cadastro (A::table_name, "\"data_cadastro\"", 0);

  template <typename A>
  const typename query_columns< ::usuario, id_pgsql, A >::ultimo_acesso_type_
  query_columns< ::usuario, id_pgsql, A >::
  ultimo_acesso (A::table_name, "\"ultimo_acesso\"", 0);

  template <typename A>
  struct pointer_query_columns< ::usuario, id_pgsql, A >:
    query_columns< ::usuario, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::usuario, id_pgsql >:
    public access::object_traits< ::usuario >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // rg
      //
      details::buffer rg_value;
      std::size_t rg_size;
      bool rg_null;

      // cpf
      //
      details::buffer cpf_value;
      std::size_t cpf_size;
      bool cpf_null;

      // nome
      //
      details::buffer nome_value;
      std::size_t nome_size;
      bool nome_null;

      // sobrenome
      //
      details::buffer sobrenome_value;
      std::size_t sobrenome_size;
      bool sobrenome_null;

      // hash_senha
      //
      details::buffer hash_senha_value;
      std::size_t hash_senha_size;
      bool hash_senha_null;

      // data_cadastro
      //
      details::buffer data_cadastro_value;
      std::size_t data_cadastro_size;
      bool data_cadastro_null;

      // ultimo_acesso
      //
      details::buffer ultimo_acesso_value;
      std::size_t ultimo_acesso_size;
      bool ultimo_acesso_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::usuario, id_common >:
    public access::object_traits_impl< ::usuario, id_pgsql >
  {
  };

  // usuariopapel
  //
  template <typename A>
  struct query_columns< ::usuariopapel, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // usuario
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    usuario_type_;

    static const usuario_type_ usuario;

    // papel
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    papel_type_;

    static const papel_type_ papel;

    // valido
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    valido_type_;

    static const valido_type_ valido;
  };

  template <typename A>
  const typename query_columns< ::usuariopapel, id_pgsql, A >::id_type_
  query_columns< ::usuariopapel, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::usuariopapel, id_pgsql, A >::usuario_type_
  query_columns< ::usuariopapel, id_pgsql, A >::
  usuario (A::table_name, "\"usuario\"", 0);

  template <typename A>
  const typename query_columns< ::usuariopapel, id_pgsql, A >::papel_type_
  query_columns< ::usuariopapel, id_pgsql, A >::
  papel (A::table_name, "\"papel\"", 0);

  template <typename A>
  const typename query_columns< ::usuariopapel, id_pgsql, A >::valido_type_
  query_columns< ::usuariopapel, id_pgsql, A >::
  valido (A::table_name, "\"valido\"", 0);

  template <typename A>
  struct pointer_query_columns< ::usuariopapel, id_pgsql, A >:
    query_columns< ::usuariopapel, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::usuariopapel, id_pgsql >:
    public access::object_traits< ::usuariopapel >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // usuario
      //
      int usuario_value;
      bool usuario_null;

      // papel
      //
      int papel_value;
      bool papel_null;

      // valido
      //
      bool valido_value;
      bool valido_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::usuariopapel, id_common >:
    public access::object_traits_impl< ::usuariopapel, id_pgsql >
  {
  };

  // auditoria
  //
  template <typename A>
  struct query_columns< ::auditoria, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // acao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    acao_type_;

    static const acao_type_ acao;

    // usuario
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    usuario_type_;

    static const usuario_type_ usuario;
  };

  template <typename A>
  const typename query_columns< ::auditoria, id_pgsql, A >::id_type_
  query_columns< ::auditoria, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::auditoria, id_pgsql, A >::acao_type_
  query_columns< ::auditoria, id_pgsql, A >::
  acao (A::table_name, "\"acao\"", 0);

  template <typename A>
  const typename query_columns< ::auditoria, id_pgsql, A >::usuario_type_
  query_columns< ::auditoria, id_pgsql, A >::
  usuario (A::table_name, "\"usuario\"", 0);

  template <typename A>
  struct pointer_query_columns< ::auditoria, id_pgsql, A >:
    query_columns< ::auditoria, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::auditoria, id_pgsql >:
    public access::object_traits< ::auditoria >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // acao
      //
      details::buffer acao_value;
      std::size_t acao_size;
      bool acao_null;

      // usuario
      //
      int usuario_value;
      bool usuario_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::auditoria, id_common >:
    public access::object_traits_impl< ::auditoria, id_pgsql >
  {
  };

  // pessoa
  //
  template <typename A>
  struct query_columns< ::pessoa, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // cpf
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cpf_type_;

    static const cpf_type_ cpf;

    // rg
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    rg_type_;

    static const rg_type_ rg;

    // nome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    nome_type_;

    static const nome_type_ nome;
  };

  template <typename A>
  const typename query_columns< ::pessoa, id_pgsql, A >::id_type_
  query_columns< ::pessoa, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::pessoa, id_pgsql, A >::cpf_type_
  query_columns< ::pessoa, id_pgsql, A >::
  cpf (A::table_name, "\"cpf\"", 0);

  template <typename A>
  const typename query_columns< ::pessoa, id_pgsql, A >::rg_type_
  query_columns< ::pessoa, id_pgsql, A >::
  rg (A::table_name, "\"rg\"", 0);

  template <typename A>
  const typename query_columns< ::pessoa, id_pgsql, A >::nome_type_
  query_columns< ::pessoa, id_pgsql, A >::
  nome (A::table_name, "\"nome\"", 0);

  template <typename A>
  struct pointer_query_columns< ::pessoa, id_pgsql, A >:
    query_columns< ::pessoa, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::pessoa, id_pgsql >:
    public access::object_traits< ::pessoa >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // cpf
      //
      details::buffer cpf_value;
      std::size_t cpf_size;
      bool cpf_null;

      // rg
      //
      details::buffer rg_value;
      std::size_t rg_size;
      bool rg_null;

      // nome
      //
      details::buffer nome_value;
      std::size_t nome_size;
      bool nome_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // apelidos
    //
    struct apelidos_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::basic_string< char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< apelidos_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::pessoa, id_common >:
    public access::object_traits_impl< ::pessoa, id_pgsql >
  {
  };

  // denuncia
  //
  template <typename A>
  struct query_columns< ::denuncia, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // valido
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    valido_type_;

    static const valido_type_ valido;

    // pessoa
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    pessoa_type_;

    static const pessoa_type_ pessoa;

    // ultima_localizacao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ultima_localizacao_type_;

    static const ultima_localizacao_type_ ultima_localizacao;

    // usuario_cadastro
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    usuario_cadastro_type_;

    static const usuario_cadastro_type_ usuario_cadastro;

    // usuario_ultima_atualizacao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    usuario_ultima_atualizacao_type_;

    static const usuario_ultima_atualizacao_type_ usuario_ultima_atualizacao;

    // data_denuncia
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    data_denuncia_type_;

    static const data_denuncia_type_ data_denuncia;
  };

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::id_type_
  query_columns< ::denuncia, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::valido_type_
  query_columns< ::denuncia, id_pgsql, A >::
  valido (A::table_name, "\"valido\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::pessoa_type_
  query_columns< ::denuncia, id_pgsql, A >::
  pessoa (A::table_name, "\"pessoa\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::ultima_localizacao_type_
  query_columns< ::denuncia, id_pgsql, A >::
  ultima_localizacao (A::table_name, "\"ultima_localizacao\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::usuario_cadastro_type_
  query_columns< ::denuncia, id_pgsql, A >::
  usuario_cadastro (A::table_name, "\"usuario_cadastro\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::usuario_ultima_atualizacao_type_
  query_columns< ::denuncia, id_pgsql, A >::
  usuario_ultima_atualizacao (A::table_name, "\"usuario_ultima_atualizacao\"", 0);

  template <typename A>
  const typename query_columns< ::denuncia, id_pgsql, A >::data_denuncia_type_
  query_columns< ::denuncia, id_pgsql, A >::
  data_denuncia (A::table_name, "\"data_denuncia\"", 0);

  template <typename A>
  struct pointer_query_columns< ::denuncia, id_pgsql, A >:
    query_columns< ::denuncia, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::denuncia, id_pgsql >:
    public access::object_traits< ::denuncia >
  {
    public:
    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      bool id_null;

      // valido
      //
      bool valido_value;
      bool valido_null;

      // pessoa
      //
      int pessoa_value;
      bool pessoa_null;

      // ultima_localizacao
      //
      details::buffer ultima_localizacao_value;
      std::size_t ultima_localizacao_size;
      bool ultima_localizacao_null;

      // usuario_cadastro
      //
      int usuario_cadastro_value;
      bool usuario_cadastro_null;

      // usuario_ultima_atualizacao
      //
      int usuario_ultima_atualizacao_value;
      bool usuario_ultima_atualizacao_null;

      // data_denuncia
      //
      details::buffer data_denuncia_value;
      std::size_t data_denuncia_size;
      bool data_denuncia_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // localizacoes
    //
    struct localizacoes_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::basic_string< char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< localizacoes_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::denuncia, id_common >:
    public access::object_traits_impl< ::denuncia, id_pgsql >
  {
  };

  // papel
  //
  // usuario
  //
  // usuariopapel
  //
  // auditoria
  //
  // pessoa
  //
  // denuncia
  //
}

#include "AllClass-odb.ixx"

#include <odb/post.hxx>

#endif // ALL_CLASS_ODB_HXX
