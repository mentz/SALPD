// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "AllClass-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/view-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>
#include <odb/pgsql/view-result.hxx>

namespace odb
{
  // papel
  //

  const char access::object_traits_impl< ::papel, id_pgsql >::
  persist_statement_name[] = "persist_papel";

  const char access::object_traits_impl< ::papel, id_pgsql >::
  find_statement_name[] = "find_papel";

  const char access::object_traits_impl< ::papel, id_pgsql >::
  update_statement_name[] = "update_papel";

  const char access::object_traits_impl< ::papel, id_pgsql >::
  erase_statement_name[] = "erase_papel";

  const char access::object_traits_impl< ::papel, id_pgsql >::
  query_statement_name[] = "query_papel";

  const char access::object_traits_impl< ::papel, id_pgsql >::
  erase_query_statement_name[] = "erase_query_papel";

  const unsigned int access::object_traits_impl< ::papel, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::papel, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::papel, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::papel, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::papel, id_pgsql >::id_type
  access::object_traits_impl< ::papel, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::papel, id_pgsql >::id_type
  access::object_traits_impl< ::papel, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::papel, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // permissoes
    //
    if (t[1UL])
    {
      i.permissoes_value.capacity (i.permissoes_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // permissoes
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.permissoes_value.data ();
    b[n].capacity = i.permissoes_value.capacity ();
    b[n].size = &i.permissoes_size;
    b[n].is_null = &i.permissoes_null;
    n++;
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::papel, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // permissoes
    //
    {
      ::std::string const& v =
        o.permissoes;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.permissoes_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.permissoes_value,
        size,
        is_null,
        v);
      i.permissoes_null = is_null;
      i.permissoes_size = size;
      grew = grew || (cap != i.permissoes_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // permissoes
    //
    {
      ::std::string& v =
        o.permissoes;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.permissoes_value,
        i.permissoes_size,
        i.permissoes_null);
    }
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::papel, id_pgsql >::persist_statement[] =
  "INSERT INTO \"papel\" "
  "(\"id\", "
  "\"permissoes\") "
  "VALUES "
  "(DEFAULT, $1) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::papel, id_pgsql >::find_statement[] =
  "SELECT "
  "\"papel\".\"id\", "
  "\"papel\".\"permissoes\" "
  "FROM \"papel\" "
  "WHERE \"papel\".\"id\"=$1";

  const char access::object_traits_impl< ::papel, id_pgsql >::update_statement[] =
  "UPDATE \"papel\" "
  "SET "
  "\"permissoes\"=$1 "
  "WHERE \"id\"=$2";

  const char access::object_traits_impl< ::papel, id_pgsql >::erase_statement[] =
  "DELETE FROM \"papel\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::papel, id_pgsql >::query_statement[] =
  "SELECT "
  "\"papel\".\"id\", "
  "\"papel\".\"permissoes\" "
  "FROM \"papel\"";

  const char access::object_traits_impl< ::papel, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"papel\"";

  const char access::object_traits_impl< ::papel, id_pgsql >::table_name[] =
  "\"papel\"";

  void access::object_traits_impl< ::papel, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::papel, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::papel, id_pgsql >::pointer_type
  access::object_traits_impl< ::papel, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::papel, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::papel, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::papel, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::papel, id_pgsql >::object_type >
  access::object_traits_impl< ::papel, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::papel, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // usuario
  //

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  persist_statement_name[] = "persist_usuario";

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  find_statement_name[] = "find_usuario";

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  update_statement_name[] = "update_usuario";

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  erase_statement_name[] = "erase_usuario";

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  query_statement_name[] = "query_usuario";

  const char access::object_traits_impl< ::usuario, id_pgsql >::
  erase_query_statement_name[] = "erase_query_usuario";

  const unsigned int access::object_traits_impl< ::usuario, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::usuario, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::usuario, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::papel,
    id_pgsql,
    access::object_traits_impl< ::usuario, id_pgsql >::fk_papel_tag>::
  table_name[] = "\"fk_papel\"";

  struct access::object_traits_impl< ::usuario, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::usuario, id_pgsql >::id_type
  access::object_traits_impl< ::usuario, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::usuario, id_pgsql >::id_type
  access::object_traits_impl< ::usuario, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::usuario, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // fk_papel
    //
    t[1UL] = 0;

    // rg
    //
    if (t[2UL])
    {
      i.rg_value.capacity (i.rg_size);
      grew = true;
    }

    // cpf
    //
    if (t[3UL])
    {
      i.cpf_value.capacity (i.cpf_size);
      grew = true;
    }

    // nome
    //
    if (t[4UL])
    {
      i.nome_value.capacity (i.nome_size);
      grew = true;
    }

    // nome_usuario
    //
    if (t[5UL])
    {
      i.nome_usuario_value.capacity (i.nome_usuario_size);
      grew = true;
    }

    // hash_senha
    //
    if (t[6UL])
    {
      i.hash_senha_value.capacity (i.hash_senha_size);
      grew = true;
    }

    // data_cadastro
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // fk_papel
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.fk_papel_value;
    b[n].is_null = &i.fk_papel_null;
    n++;

    // rg
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.rg_value.data ();
    b[n].capacity = i.rg_value.capacity ();
    b[n].size = &i.rg_size;
    b[n].is_null = &i.rg_null;
    n++;

    // cpf
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.cpf_value.data ();
    b[n].capacity = i.cpf_value.capacity ();
    b[n].size = &i.cpf_size;
    b[n].is_null = &i.cpf_null;
    n++;

    // nome
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.nome_value.data ();
    b[n].capacity = i.nome_value.capacity ();
    b[n].size = &i.nome_size;
    b[n].is_null = &i.nome_null;
    n++;

    // nome_usuario
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.nome_usuario_value.data ();
    b[n].capacity = i.nome_usuario_value.capacity ();
    b[n].size = &i.nome_usuario_size;
    b[n].is_null = &i.nome_usuario_null;
    n++;

    // hash_senha
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.hash_senha_value.data ();
    b[n].capacity = i.hash_senha_value.capacity ();
    b[n].size = &i.hash_senha_size;
    b[n].is_null = &i.hash_senha_null;
    n++;

    // data_cadastro
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.data_cadastro_value;
    b[n].is_null = &i.data_cadastro_null;
    n++;
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::usuario, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // fk_papel
    //
    {
      ::papel* const& v =
        o.fk_papel;

      typedef object_traits< ::papel > obj_traits;
      typedef odb::pointer_traits< ::papel* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.fk_papel_value, is_null, id);
        i.fk_papel_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // rg
    //
    {
      ::std::string const& v =
        o.rg;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.rg_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.rg_value,
        size,
        is_null,
        v);
      i.rg_null = is_null;
      i.rg_size = size;
      grew = grew || (cap != i.rg_value.capacity ());
    }

    // cpf
    //
    {
      ::std::string const& v =
        o.cpf;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.cpf_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.cpf_value,
        size,
        is_null,
        v);
      i.cpf_null = is_null;
      i.cpf_size = size;
      grew = grew || (cap != i.cpf_value.capacity ());
    }

    // nome
    //
    {
      ::std::string const& v =
        o.nome;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.nome_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.nome_value,
        size,
        is_null,
        v);
      i.nome_null = is_null;
      i.nome_size = size;
      grew = grew || (cap != i.nome_value.capacity ());
    }

    // nome_usuario
    //
    {
      ::std::string const& v =
        o.nome_usuario;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.nome_usuario_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.nome_usuario_value,
        size,
        is_null,
        v);
      i.nome_usuario_null = is_null;
      i.nome_usuario_size = size;
      grew = grew || (cap != i.nome_usuario_value.capacity ());
    }

    // hash_senha
    //
    {
      ::std::string const& v =
        o.hash_senha;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.hash_senha_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.hash_senha_value,
        size,
        is_null,
        v);
      i.hash_senha_null = is_null;
      i.hash_senha_size = size;
      grew = grew || (cap != i.hash_senha_value.capacity ());
    }

    // data_cadastro
    //
    {
      ::time_t const& v =
        o.data_cadastro;

      bool is_null (false);
      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_image (
        i.data_cadastro_value, is_null, v);
      i.data_cadastro_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // fk_papel
    //
    {
      ::papel*& v =
        o.fk_papel;

      typedef object_traits< ::papel > obj_traits;
      typedef odb::pointer_traits< ::papel* > ptr_traits;

      if (i.fk_papel_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.fk_papel_value,
          i.fk_papel_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // rg
    //
    {
      ::std::string& v =
        o.rg;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.rg_value,
        i.rg_size,
        i.rg_null);
    }

    // cpf
    //
    {
      ::std::string& v =
        o.cpf;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.cpf_value,
        i.cpf_size,
        i.cpf_null);
    }

    // nome
    //
    {
      ::std::string& v =
        o.nome;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.nome_value,
        i.nome_size,
        i.nome_null);
    }

    // nome_usuario
    //
    {
      ::std::string& v =
        o.nome_usuario;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.nome_usuario_value,
        i.nome_usuario_size,
        i.nome_usuario_null);
    }

    // hash_senha
    //
    {
      ::std::string& v =
        o.hash_senha;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.hash_senha_value,
        i.hash_senha_size,
        i.hash_senha_null);
    }

    // data_cadastro
    //
    {
      ::time_t& v =
        o.data_cadastro;

      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_value (
        v,
        i.data_cadastro_value,
        i.data_cadastro_null);
    }
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::usuario, id_pgsql >::persist_statement[] =
  "INSERT INTO \"usuario\" "
  "(\"id\", "
  "\"fk_papel\", "
  "\"rg\", "
  "\"cpf\", "
  "\"nome\", "
  "\"nome_usuario\", "
  "\"hash_senha\", "
  "\"data_cadastro\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::usuario, id_pgsql >::find_statement[] =
  "SELECT "
  "\"usuario\".\"id\", "
  "\"usuario\".\"fk_papel\", "
  "\"usuario\".\"rg\", "
  "\"usuario\".\"cpf\", "
  "\"usuario\".\"nome\", "
  "\"usuario\".\"nome_usuario\", "
  "\"usuario\".\"hash_senha\", "
  "\"usuario\".\"data_cadastro\" "
  "FROM \"usuario\" "
  "WHERE \"usuario\".\"id\"=$1";

  const char access::object_traits_impl< ::usuario, id_pgsql >::update_statement[] =
  "UPDATE \"usuario\" "
  "SET "
  "\"fk_papel\"=$1, "
  "\"rg\"=$2, "
  "\"cpf\"=$3, "
  "\"nome\"=$4, "
  "\"nome_usuario\"=$5, "
  "\"hash_senha\"=$6, "
  "\"data_cadastro\"=$7 "
  "WHERE \"id\"=$8";

  const char access::object_traits_impl< ::usuario, id_pgsql >::erase_statement[] =
  "DELETE FROM \"usuario\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::usuario, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"usuario\".\"id\",\n"
  "\"usuario\".\"fk_papel\",\n"
  "\"usuario\".\"rg\",\n"
  "\"usuario\".\"cpf\",\n"
  "\"usuario\".\"nome\",\n"
  "\"usuario\".\"nome_usuario\",\n"
  "\"usuario\".\"hash_senha\",\n"
  "\"usuario\".\"data_cadastro\"\n"
  "FROM \"usuario\"\n"
  "LEFT JOIN \"papel\" AS \"fk_papel\" ON \"fk_papel\".\"id\"=\"usuario\".\"fk_papel\"";

  const char access::object_traits_impl< ::usuario, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"usuario\"";

  const char access::object_traits_impl< ::usuario, id_pgsql >::table_name[] =
  "\"usuario\"";

  void access::object_traits_impl< ::usuario, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::usuario, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::usuario, id_pgsql >::pointer_type
  access::object_traits_impl< ::usuario, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::usuario, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::usuario, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::usuario, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::usuario, id_pgsql >::object_type >
  access::object_traits_impl< ::usuario, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::usuario, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // auditoria
  //

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  persist_statement_name[] = "persist_auditoria";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  find_statement_name[] = "find_auditoria";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  update_statement_name[] = "update_auditoria";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  erase_statement_name[] = "erase_auditoria";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  query_statement_name[] = "query_auditoria";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::
  erase_query_statement_name[] = "erase_query_auditoria";

  const unsigned int access::object_traits_impl< ::auditoria, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::auditoria, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::auditoria, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::usuario,
    id_pgsql,
    access::object_traits_impl< ::auditoria, id_pgsql >::usuario_acao_tag>::
  table_name[] = "\"usuario_acao\"";

  struct access::object_traits_impl< ::auditoria, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::auditoria, id_pgsql >::id_type
  access::object_traits_impl< ::auditoria, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::auditoria, id_pgsql >::id_type
  access::object_traits_impl< ::auditoria, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::auditoria, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // acao
    //
    if (t[1UL])
    {
      i.acao_value.capacity (i.acao_size);
      grew = true;
    }

    // usuario_acao
    //
    t[2UL] = 0;

    // data_hora
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // acao
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.acao_value.data ();
    b[n].capacity = i.acao_value.capacity ();
    b[n].size = &i.acao_size;
    b[n].is_null = &i.acao_null;
    n++;

    // usuario_acao
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.usuario_acao_value;
    b[n].is_null = &i.usuario_acao_null;
    n++;

    // data_hora
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.data_hora_value;
    b[n].is_null = &i.data_hora_null;
    n++;
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::auditoria, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // acao
    //
    {
      ::std::string const& v =
        o.acao;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.acao_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.acao_value,
        size,
        is_null,
        v);
      i.acao_null = is_null;
      i.acao_size = size;
      grew = grew || (cap != i.acao_value.capacity ());
    }

    // usuario_acao
    //
    {
      ::usuario* const& v =
        o.usuario_acao;

      typedef object_traits< ::usuario > obj_traits;
      typedef odb::pointer_traits< ::usuario* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.usuario_acao_value, is_null, id);
        i.usuario_acao_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // data_hora
    //
    {
      ::time_t const& v =
        o.data_hora;

      bool is_null (false);
      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_image (
        i.data_hora_value, is_null, v);
      i.data_hora_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // acao
    //
    {
      ::std::string& v =
        o.acao;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.acao_value,
        i.acao_size,
        i.acao_null);
    }

    // usuario_acao
    //
    {
      ::usuario*& v =
        o.usuario_acao;

      typedef object_traits< ::usuario > obj_traits;
      typedef odb::pointer_traits< ::usuario* > ptr_traits;

      if (i.usuario_acao_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.usuario_acao_value,
          i.usuario_acao_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // data_hora
    //
    {
      ::time_t& v =
        o.data_hora;

      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_value (
        v,
        i.data_hora_value,
        i.data_hora_null);
    }
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::auditoria, id_pgsql >::persist_statement[] =
  "INSERT INTO \"auditoria\" "
  "(\"id\", "
  "\"acao\", "
  "\"usuario_acao\", "
  "\"data_hora\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::find_statement[] =
  "SELECT "
  "\"auditoria\".\"id\", "
  "\"auditoria\".\"acao\", "
  "\"auditoria\".\"usuario_acao\", "
  "\"auditoria\".\"data_hora\" "
  "FROM \"auditoria\" "
  "WHERE \"auditoria\".\"id\"=$1";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::update_statement[] =
  "UPDATE \"auditoria\" "
  "SET "
  "\"acao\"=$1, "
  "\"usuario_acao\"=$2, "
  "\"data_hora\"=$3 "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::erase_statement[] =
  "DELETE FROM \"auditoria\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"auditoria\".\"id\",\n"
  "\"auditoria\".\"acao\",\n"
  "\"auditoria\".\"usuario_acao\",\n"
  "\"auditoria\".\"data_hora\"\n"
  "FROM \"auditoria\"\n"
  "LEFT JOIN \"usuario\" AS \"usuario_acao\" ON \"usuario_acao\".\"id\"=\"auditoria\".\"usuario_acao\"";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"auditoria\"";

  const char access::object_traits_impl< ::auditoria, id_pgsql >::table_name[] =
  "\"auditoria\"";

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::auditoria, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::auditoria, id_pgsql >::pointer_type
  access::object_traits_impl< ::auditoria, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::auditoria, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::auditoria, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::auditoria, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::auditoria, id_pgsql >::object_type >
  access::object_traits_impl< ::auditoria, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::auditoria, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // pessoa
  //

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  persist_statement_name[] = "persist_pessoa";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  find_statement_name[] = "find_pessoa";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  update_statement_name[] = "update_pessoa";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  erase_statement_name[] = "erase_pessoa";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  query_statement_name[] = "query_pessoa";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::
  erase_query_statement_name[] = "erase_query_pessoa";

  const unsigned int access::object_traits_impl< ::pessoa, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::bool_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::pessoa, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::pessoa, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::bool_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::pessoa, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::pessoa, id_pgsql >::id_type
  access::object_traits_impl< ::pessoa, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::pessoa, id_pgsql >::id_type
  access::object_traits_impl< ::pessoa, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::pessoa, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // estado
    //
    t[1UL] = 0;

    // rg
    //
    if (t[2UL])
    {
      i.rg_value.capacity (i.rg_size);
      grew = true;
    }

    // cpf
    //
    if (t[3UL])
    {
      i.cpf_value.capacity (i.cpf_size);
      grew = true;
    }

    // nome
    //
    if (t[4UL])
    {
      i.nome_value.capacity (i.nome_size);
      grew = true;
    }

    // idade
    //
    t[5UL] = 0;

    // detalhes
    //
    if (t[6UL])
    {
      i.detalhes_value.capacity (i.detalhes_size);
      grew = true;
    }

    // data_cadastro
    //
    t[7UL] = 0;

    // ultimo_update
    //
    t[8UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // estado
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.estado_value;
    b[n].is_null = &i.estado_null;
    n++;

    // rg
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.rg_value.data ();
    b[n].capacity = i.rg_value.capacity ();
    b[n].size = &i.rg_size;
    b[n].is_null = &i.rg_null;
    n++;

    // cpf
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.cpf_value.data ();
    b[n].capacity = i.cpf_value.capacity ();
    b[n].size = &i.cpf_size;
    b[n].is_null = &i.cpf_null;
    n++;

    // nome
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.nome_value.data ();
    b[n].capacity = i.nome_value.capacity ();
    b[n].size = &i.nome_size;
    b[n].is_null = &i.nome_null;
    n++;

    // idade
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.idade_value;
    b[n].is_null = &i.idade_null;
    n++;

    // detalhes
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.detalhes_value.data ();
    b[n].capacity = i.detalhes_value.capacity ();
    b[n].size = &i.detalhes_size;
    b[n].is_null = &i.detalhes_null;
    n++;

    // data_cadastro
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.data_cadastro_value;
    b[n].is_null = &i.data_cadastro_null;
    n++;

    // ultimo_update
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.ultimo_update_value;
    b[n].is_null = &i.ultimo_update_null;
    n++;
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::pessoa, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // estado
    //
    {
      bool const& v =
        o.estado;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.estado_value, is_null, v);
      i.estado_null = is_null;
    }

    // rg
    //
    {
      ::std::string const& v =
        o.rg;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.rg_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.rg_value,
        size,
        is_null,
        v);
      i.rg_null = is_null;
      i.rg_size = size;
      grew = grew || (cap != i.rg_value.capacity ());
    }

    // cpf
    //
    {
      ::std::string const& v =
        o.cpf;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.cpf_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.cpf_value,
        size,
        is_null,
        v);
      i.cpf_null = is_null;
      i.cpf_size = size;
      grew = grew || (cap != i.cpf_value.capacity ());
    }

    // nome
    //
    {
      ::std::string const& v =
        o.nome;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.nome_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.nome_value,
        size,
        is_null,
        v);
      i.nome_null = is_null;
      i.nome_size = size;
      grew = grew || (cap != i.nome_value.capacity ());
    }

    // idade
    //
    {
      int const& v =
        o.idade;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.idade_value, is_null, v);
      i.idade_null = is_null;
    }

    // detalhes
    //
    {
      ::std::string const& v =
        o.detalhes;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.detalhes_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.detalhes_value,
        size,
        is_null,
        v);
      i.detalhes_null = is_null;
      i.detalhes_size = size;
      grew = grew || (cap != i.detalhes_value.capacity ());
    }

    // data_cadastro
    //
    {
      ::time_t const& v =
        o.data_cadastro;

      bool is_null (false);
      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_image (
        i.data_cadastro_value, is_null, v);
      i.data_cadastro_null = is_null;
    }

    // ultimo_update
    //
    {
      ::time_t const& v =
        o.ultimo_update;

      bool is_null (false);
      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_image (
        i.ultimo_update_value, is_null, v);
      i.ultimo_update_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // estado
    //
    {
      bool& v =
        o.estado;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.estado_value,
        i.estado_null);
    }

    // rg
    //
    {
      ::std::string& v =
        o.rg;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.rg_value,
        i.rg_size,
        i.rg_null);
    }

    // cpf
    //
    {
      ::std::string& v =
        o.cpf;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.cpf_value,
        i.cpf_size,
        i.cpf_null);
    }

    // nome
    //
    {
      ::std::string& v =
        o.nome;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.nome_value,
        i.nome_size,
        i.nome_null);
    }

    // idade
    //
    {
      int& v =
        o.idade;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.idade_value,
        i.idade_null);
    }

    // detalhes
    //
    {
      ::std::string& v =
        o.detalhes;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.detalhes_value,
        i.detalhes_size,
        i.detalhes_null);
    }

    // data_cadastro
    //
    {
      ::time_t& v =
        o.data_cadastro;

      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_value (
        v,
        i.data_cadastro_value,
        i.data_cadastro_null);
    }

    // ultimo_update
    //
    {
      ::time_t& v =
        o.ultimo_update;

      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_value (
        v,
        i.ultimo_update_value,
        i.ultimo_update_null);
    }
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::pessoa, id_pgsql >::persist_statement[] =
  "INSERT INTO \"pessoa\" "
  "(\"id\", "
  "\"estado\", "
  "\"rg\", "
  "\"cpf\", "
  "\"nome\", "
  "\"idade\", "
  "\"detalhes\", "
  "\"data_cadastro\", "
  "\"ultimo_update\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::find_statement[] =
  "SELECT "
  "\"pessoa\".\"id\", "
  "\"pessoa\".\"estado\", "
  "\"pessoa\".\"rg\", "
  "\"pessoa\".\"cpf\", "
  "\"pessoa\".\"nome\", "
  "\"pessoa\".\"idade\", "
  "\"pessoa\".\"detalhes\", "
  "\"pessoa\".\"data_cadastro\", "
  "\"pessoa\".\"ultimo_update\" "
  "FROM \"pessoa\" "
  "WHERE \"pessoa\".\"id\"=$1";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::update_statement[] =
  "UPDATE \"pessoa\" "
  "SET "
  "\"estado\"=$1, "
  "\"rg\"=$2, "
  "\"cpf\"=$3, "
  "\"nome\"=$4, "
  "\"idade\"=$5, "
  "\"detalhes\"=$6, "
  "\"data_cadastro\"=$7, "
  "\"ultimo_update\"=$8 "
  "WHERE \"id\"=$9";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::erase_statement[] =
  "DELETE FROM \"pessoa\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::query_statement[] =
  "SELECT "
  "\"pessoa\".\"id\", "
  "\"pessoa\".\"estado\", "
  "\"pessoa\".\"rg\", "
  "\"pessoa\".\"cpf\", "
  "\"pessoa\".\"nome\", "
  "\"pessoa\".\"idade\", "
  "\"pessoa\".\"detalhes\", "
  "\"pessoa\".\"data_cadastro\", "
  "\"pessoa\".\"ultimo_update\" "
  "FROM \"pessoa\"";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"pessoa\"";

  const char access::object_traits_impl< ::pessoa, id_pgsql >::table_name[] =
  "\"pessoa\"";

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::pessoa, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::pessoa, id_pgsql >::pointer_type
  access::object_traits_impl< ::pessoa, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::pessoa, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::pessoa, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::pessoa, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::pessoa, id_pgsql >::object_type >
  access::object_traits_impl< ::pessoa, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::pessoa, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // denuncia
  //

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  persist_statement_name[] = "persist_denuncia";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  find_statement_name[] = "find_denuncia";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  update_statement_name[] = "update_denuncia";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  erase_statement_name[] = "erase_denuncia";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  query_statement_name[] = "query_denuncia";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::
  erase_query_statement_name[] = "erase_query_denuncia";

  const unsigned int access::object_traits_impl< ::denuncia, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::bool_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::denuncia, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::denuncia, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::bool_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int4_oid
  };

  const char alias_traits<  ::pessoa,
    id_pgsql,
    access::object_traits_impl< ::denuncia, id_pgsql >::pessoa_denuncia_tag>::
  table_name[] = "\"pessoa_denuncia\"";

  const char alias_traits<  ::usuario,
    id_pgsql,
    access::object_traits_impl< ::denuncia, id_pgsql >::usuario_denuncia_tag>::
  table_name[] = "\"usuario_denuncia\"";

  struct access::object_traits_impl< ::denuncia, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::denuncia, id_pgsql >::id_type
  access::object_traits_impl< ::denuncia, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::denuncia, id_pgsql >::id_type
  access::object_traits_impl< ::denuncia, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::denuncia, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // estado
    //
    t[1UL] = 0;

    // pessoa_denuncia
    //
    t[2UL] = 0;

    // latitude
    //
    if (t[3UL])
    {
      i.latitude_value.capacity (i.latitude_size);
      grew = true;
    }

    // longitude
    //
    if (t[4UL])
    {
      i.longitude_value.capacity (i.longitude_size);
      grew = true;
    }

    // usuario_denuncia
    //
    t[5UL] = 0;

    // latitude_denuncia
    //
    if (t[6UL])
    {
      i.latitude_denuncia_value.capacity (i.latitude_denuncia_size);
      grew = true;
    }

    // longitude_denuncia
    //
    if (t[7UL])
    {
      i.longitude_denuncia_value.capacity (i.longitude_denuncia_size);
      grew = true;
    }

    // detalhes
    //
    if (t[8UL])
    {
      i.detalhes_value.capacity (i.detalhes_size);
      grew = true;
    }

    // data_denuncia
    //
    t[9UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // estado
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.estado_value;
    b[n].is_null = &i.estado_null;
    n++;

    // pessoa_denuncia
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.pessoa_denuncia_value;
    b[n].is_null = &i.pessoa_denuncia_null;
    n++;

    // latitude
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.latitude_value.data ();
    b[n].capacity = i.latitude_value.capacity ();
    b[n].size = &i.latitude_size;
    b[n].is_null = &i.latitude_null;
    n++;

    // longitude
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.longitude_value.data ();
    b[n].capacity = i.longitude_value.capacity ();
    b[n].size = &i.longitude_size;
    b[n].is_null = &i.longitude_null;
    n++;

    // usuario_denuncia
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.usuario_denuncia_value;
    b[n].is_null = &i.usuario_denuncia_null;
    n++;

    // latitude_denuncia
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.latitude_denuncia_value.data ();
    b[n].capacity = i.latitude_denuncia_value.capacity ();
    b[n].size = &i.latitude_denuncia_size;
    b[n].is_null = &i.latitude_denuncia_null;
    n++;

    // longitude_denuncia
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.longitude_denuncia_value.data ();
    b[n].capacity = i.longitude_denuncia_value.capacity ();
    b[n].size = &i.longitude_denuncia_size;
    b[n].is_null = &i.longitude_denuncia_null;
    n++;

    // detalhes
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.detalhes_value.data ();
    b[n].capacity = i.detalhes_value.capacity ();
    b[n].size = &i.detalhes_size;
    b[n].is_null = &i.detalhes_null;
    n++;

    // data_denuncia
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.data_denuncia_value;
    b[n].is_null = &i.data_denuncia_null;
    n++;
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::denuncia, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // estado
    //
    {
      bool const& v =
        o.estado;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.estado_value, is_null, v);
      i.estado_null = is_null;
    }

    // pessoa_denuncia
    //
    {
      ::pessoa* const& v =
        o.pessoa_denuncia;

      typedef object_traits< ::pessoa > obj_traits;
      typedef odb::pointer_traits< ::pessoa* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.pessoa_denuncia_value, is_null, id);
        i.pessoa_denuncia_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // latitude
    //
    {
      ::std::string const& v =
        o.latitude;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.latitude_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.latitude_value,
        size,
        is_null,
        v);
      i.latitude_null = is_null;
      i.latitude_size = size;
      grew = grew || (cap != i.latitude_value.capacity ());
    }

    // longitude
    //
    {
      ::std::string const& v =
        o.longitude;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.longitude_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.longitude_value,
        size,
        is_null,
        v);
      i.longitude_null = is_null;
      i.longitude_size = size;
      grew = grew || (cap != i.longitude_value.capacity ());
    }

    // usuario_denuncia
    //
    {
      ::usuario* const& v =
        o.usuario_denuncia;

      typedef object_traits< ::usuario > obj_traits;
      typedef odb::pointer_traits< ::usuario* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.usuario_denuncia_value, is_null, id);
        i.usuario_denuncia_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // latitude_denuncia
    //
    {
      ::std::string const& v =
        o.latitude_denuncia;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.latitude_denuncia_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.latitude_denuncia_value,
        size,
        is_null,
        v);
      i.latitude_denuncia_null = is_null;
      i.latitude_denuncia_size = size;
      grew = grew || (cap != i.latitude_denuncia_value.capacity ());
    }

    // longitude_denuncia
    //
    {
      ::std::string const& v =
        o.longitude_denuncia;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.longitude_denuncia_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.longitude_denuncia_value,
        size,
        is_null,
        v);
      i.longitude_denuncia_null = is_null;
      i.longitude_denuncia_size = size;
      grew = grew || (cap != i.longitude_denuncia_value.capacity ());
    }

    // detalhes
    //
    {
      ::std::string const& v =
        o.detalhes;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.detalhes_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.detalhes_value,
        size,
        is_null,
        v);
      i.detalhes_null = is_null;
      i.detalhes_size = size;
      grew = grew || (cap != i.detalhes_value.capacity ());
    }

    // data_denuncia
    //
    {
      ::time_t const& v =
        o.data_denuncia;

      bool is_null (false);
      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_image (
        i.data_denuncia_value, is_null, v);
      i.data_denuncia_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      unsigned int& v =
        o.id;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // estado
    //
    {
      bool& v =
        o.estado;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.estado_value,
        i.estado_null);
    }

    // pessoa_denuncia
    //
    {
      ::pessoa*& v =
        o.pessoa_denuncia;

      typedef object_traits< ::pessoa > obj_traits;
      typedef odb::pointer_traits< ::pessoa* > ptr_traits;

      if (i.pessoa_denuncia_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.pessoa_denuncia_value,
          i.pessoa_denuncia_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // latitude
    //
    {
      ::std::string& v =
        o.latitude;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.latitude_value,
        i.latitude_size,
        i.latitude_null);
    }

    // longitude
    //
    {
      ::std::string& v =
        o.longitude;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.longitude_value,
        i.longitude_size,
        i.longitude_null);
    }

    // usuario_denuncia
    //
    {
      ::usuario*& v =
        o.usuario_denuncia;

      typedef object_traits< ::usuario > obj_traits;
      typedef odb::pointer_traits< ::usuario* > ptr_traits;

      if (i.usuario_denuncia_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.usuario_denuncia_value,
          i.usuario_denuncia_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // latitude_denuncia
    //
    {
      ::std::string& v =
        o.latitude_denuncia;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.latitude_denuncia_value,
        i.latitude_denuncia_size,
        i.latitude_denuncia_null);
    }

    // longitude_denuncia
    //
    {
      ::std::string& v =
        o.longitude_denuncia;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.longitude_denuncia_value,
        i.longitude_denuncia_size,
        i.longitude_denuncia_null);
    }

    // detalhes
    //
    {
      ::std::string& v =
        o.detalhes;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.detalhes_value,
        i.detalhes_size,
        i.detalhes_null);
    }

    // data_denuncia
    //
    {
      ::time_t& v =
        o.data_denuncia;

      pgsql::value_traits<
          ::time_t,
          pgsql::id_bigint >::set_value (
        v,
        i.data_denuncia_value,
        i.data_denuncia_null);
    }
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::denuncia, id_pgsql >::persist_statement[] =
  "INSERT INTO \"denuncia\" "
  "(\"id\", "
  "\"estado\", "
  "\"pessoa_denuncia\", "
  "\"latitude\", "
  "\"longitude\", "
  "\"usuario_denuncia\", "
  "\"latitude_denuncia\", "
  "\"longitude_denuncia\", "
  "\"detalhes\", "
  "\"data_denuncia\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::find_statement[] =
  "SELECT "
  "\"denuncia\".\"id\", "
  "\"denuncia\".\"estado\", "
  "\"denuncia\".\"pessoa_denuncia\", "
  "\"denuncia\".\"latitude\", "
  "\"denuncia\".\"longitude\", "
  "\"denuncia\".\"usuario_denuncia\", "
  "\"denuncia\".\"latitude_denuncia\", "
  "\"denuncia\".\"longitude_denuncia\", "
  "\"denuncia\".\"detalhes\", "
  "\"denuncia\".\"data_denuncia\" "
  "FROM \"denuncia\" "
  "WHERE \"denuncia\".\"id\"=$1";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::update_statement[] =
  "UPDATE \"denuncia\" "
  "SET "
  "\"estado\"=$1, "
  "\"pessoa_denuncia\"=$2, "
  "\"latitude\"=$3, "
  "\"longitude\"=$4, "
  "\"usuario_denuncia\"=$5, "
  "\"latitude_denuncia\"=$6, "
  "\"longitude_denuncia\"=$7, "
  "\"detalhes\"=$8, "
  "\"data_denuncia\"=$9 "
  "WHERE \"id\"=$10";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::erase_statement[] =
  "DELETE FROM \"denuncia\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"denuncia\".\"id\",\n"
  "\"denuncia\".\"estado\",\n"
  "\"denuncia\".\"pessoa_denuncia\",\n"
  "\"denuncia\".\"latitude\",\n"
  "\"denuncia\".\"longitude\",\n"
  "\"denuncia\".\"usuario_denuncia\",\n"
  "\"denuncia\".\"latitude_denuncia\",\n"
  "\"denuncia\".\"longitude_denuncia\",\n"
  "\"denuncia\".\"detalhes\",\n"
  "\"denuncia\".\"data_denuncia\"\n"
  "FROM \"denuncia\"\n"
  "LEFT JOIN \"pessoa\" AS \"pessoa_denuncia\" ON \"pessoa_denuncia\".\"id\"=\"denuncia\".\"pessoa_denuncia\"\n"
  "LEFT JOIN \"usuario\" AS \"usuario_denuncia\" ON \"usuario_denuncia\".\"id\"=\"denuncia\".\"usuario_denuncia\"";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"denuncia\"";

  const char access::object_traits_impl< ::denuncia, id_pgsql >::table_name[] =
  "\"denuncia\"";

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::denuncia, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::denuncia, id_pgsql >::pointer_type
  access::object_traits_impl< ::denuncia, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::denuncia, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::denuncia, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::denuncia, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::denuncia, id_pgsql >::object_type >
  access::object_traits_impl< ::denuncia, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::denuncia, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // view_pessoa_denuncia
  //

  const char access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  query_statement_name[] = "query_view_pessoa_denuncia";

  bool access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // nome
    //
    if (t[1UL])
    {
      i.nome_value.capacity (i.nome_size);
      grew = true;
    }

    // cpf
    //
    if (t[2UL])
    {
      i.cpf_value.capacity (i.cpf_size);
      grew = true;
    }

    // rg
    //
    if (t[3UL])
    {
      i.rg_value.capacity (i.rg_size);
      grew = true;
    }

    return grew;
  }

  void access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i)
  {
    using namespace pgsql;

    pgsql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // nome
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.nome_value.data ();
    b[n].capacity = i.nome_value.capacity ();
    b[n].size = &i.nome_size;
    b[n].is_null = &i.nome_null;
    n++;

    // cpf
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.cpf_value.data ();
    b[n].capacity = i.cpf_value.capacity ();
    b[n].size = &i.cpf_size;
    b[n].is_null = &i.cpf_null;
    n++;

    // rg
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.rg_value.data ();
    b[n].capacity = i.rg_value.capacity ();
    b[n].size = &i.rg_size;
    b[n].is_null = &i.rg_null;
    n++;
  }

  void access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // nome
    //
    {
      ::std::string& v =
        o.nome;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.nome_value,
        i.nome_size,
        i.nome_null);
    }

    // cpf
    //
    {
      ::std::string& v =
        o.cpf;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.cpf_value,
        i.cpf_size,
        i.cpf_null);
    }

    // rg
    //
    {
      ::std::string& v =
        o.rg;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.rg_value,
        i.rg_size,
        i.rg_null);
    }
  }

  access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::query_base_type
  access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT DISTINCT "
      "\"pessoa\".\"id\", "
      "\"pessoa\".\"nome\", "
      "\"pessoa\".\"cpf\", "
      "\"pessoa\".\"rg\" ");

    r += "FROM \"pessoa\"";

    r += " INNER JOIN \"denuncia\" ON";
    // From AllClass.hxx:299:32
    r += query_columns::pessoa::id == query_columns::denuncia::pessoa_denuncia;

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::view_type >
  access::view_traits_impl< ::view_pessoa_denuncia, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        qs.clause (),
        false,
        true,
        qs.parameter_types (),
        qs.parameter_count (),
        qs.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) pgsql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

#include <odb/post.hxx>
